generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  password          String
  name              String?
  profileImage      String?
  bio               String?
  interestsCategory String[]
  interestsType     String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Refresh token
  refreshToken RefreshToken[]

  // Studio
  studio Studio[]

  // Images
  avatars MediaFile[] @relation("userAvatar")
  // avatars   MediaFile[] @relation("UserMediaFiles")

  // Practice
  practicingIn Practitioner[]

  // Bookings
  // Memberships
  // Purchase history
  // Waitlist
  purchases Purchase[]
}

model RefreshToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Studio {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  slug       String   @unique
  name       String
  location   String[]
  timezone   Json
  currency   Json
  categories String[]
  types      String[]

  // logoId   String    @unique @db.ObjectId
  // logo     MediaFile @relation(name: "LogoMediaFile", fields: [logoId], references: [id])
  // bannerId String    @unique @db.ObjectId
  // banner   MediaFile @relation(name: "BannerMediaFile", fields: [bannerId], references: [id])

  // Mediafiles
  logo   MediaFile[] @relation("studioLogo")
  banner MediaFile[] @relation("studioBanner")

  tags    Tag[]
  bio     String
  mission String

  // Owner
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @db.ObjectId

  // Offerings
  offerings Offering[]

  // Practitioners
  practitioners Practitioner[]

  // ownerId String @db.ObjectId
  // owner User @relation(fields: [ownerId], references: [id])

  //
  // policy_waiver      String
  // policy_conditions  String
  // contacts           any
  // locations          Location[]
  // offerings          Offering[]
  // practitioners      Practitioner[]
  // causes             Cause[]
  // memberships        any[]
  // tickets            Ticket3[]
  // options            any[]
  // can_accept_payment Number

  // Media files
  // mediaFiles MediaFile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Practitioner {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  studioId   String?   @db.ObjectId
  offeringId String?   @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  studio     Studio?   @relation(fields: [studioId], references: [id])
  offering   Offering? @relation(fields: [offeringId], references: [id])

  @@unique([userId, studioId, offeringId])
}

model Tag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  studio   Studio? @relation(fields: [studioId], references: [id])
  studioId String? @db.ObjectId
}

model MediaFile {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  providerPublicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Studio
  // Logo
  logoStudioId   String? @db.ObjectId
  logoStudio     Studio? @relation(name: "studioLogo", fields: [logoStudioId], references: [id])
  // Banner
  bannerStudioId String? @db.ObjectId
  bannerStudio   Studio? @relation(name: "studioBanner", fields: [bannerStudioId], references: [id])

  // User
  userId     String? @db.ObjectId
  avatarUser User?   @relation(name: "userAvatar", fields: [userId], references: [id])

  // Offering
  bannerOfferingId String?   @db.ObjectId
  offeringBanner   Offering? @relation(name: "offeringBanners", fields: [bannerOfferingId], references: [id])
}

model Offering {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  slug        String      @unique
  activity    String
  name        String
  start       DateTime
  end         DateTime
  duration    Int
  description String
  spots       Int
  is_private  Boolean
  types       String[]
  categories  String[]
  banners     MediaFile[] @relation("offeringBanners")
  location    String[]
  timezone    String

  // studio
  studio   Studio @relation(fields: [studioId], references: [id])
  studioId String @db.ObjectId

  // Practitioners
  practitioners Practitioner[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[]
}

model Ticket {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Int
  currency    String

  offeringId String   @db.ObjectId
  offering   Offering @relation(fields: [offeringId], references: [id])

  status String

  purchase Purchase[]
}

model Purchase {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  ticketId String @db.ObjectId
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  paymentId    String  @unique
  receiptEmail String
  userName     String?
}
